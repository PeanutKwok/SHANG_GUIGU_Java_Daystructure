package demo11;
/*
day09-15
抽象方法：就是abstract关键字，然后去掉大括号，直接分号结束
抽象类:抽象方法所在的类，必须是抽象类才行。在class之前协商abstract即可

如何使用抽象类和抽象方法:
1.抽象类不能创建对象，如果创建，就会无法通过编译报错。只能创建其非抽象子类的对象。
不能直接创建new抽象类对象。
理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。

2.抽象类中，可以有构造方法，是供子类创建对象是，初始化父类成员使用的。
必须用一个子类来继承抽象父类。
理解：子类的构造方法中，有默认的super(),需要访问父类构造方法。

3.抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类
子类必须覆盖重写抽象父类当中所有的抽象方法。
理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。


4.抽象类的子类，必须重写抽象父类中所有的抽象方法，否则编译无法通过而报错，除非该子类也是抽象类

理解：假设补充些所有抽象方法，则类中可能包含有抽象方法，那么创建对象后，调用抽象的方法，没有意义。
创建子类对象进行使用。

覆盖重写(实现):去掉抽象方法的abstract关键字，然后补上方法体大括号
 */
public abstract class Animal {



    //抽象方法，代表吃东西，具体吃什么不确定
    public abstract void eat();//没有大括号
        //System.out.println("吃鱼");

    //这是普通的成员方法
    public void normalMethod(){

    }

}
